/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package evaluationtool;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import javax.swing.JFrame;
import java.awt.*;
import java.io.FileReader;
import static java.rmi.Naming.list;
import java.util.Collections;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
/**
 *
 * @author 
 */
public class EvaluationToolServer extends JFrame implements EvalInterface{
    public EvaluationToolServer() {
        initComponents();
        listModel();
    }
    //Initialize GUI
        /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        menuBar1 = new javax.swing.JMenuBar();
        fileMenu1 = new javax.swing.JMenu();
        openMenuItem1 = new javax.swing.JMenuItem();
        saveMenuItem1 = new javax.swing.JMenuItem();
        saveAsMenuItem1 = new javax.swing.JMenuItem();
        exitMenuItem1 = new javax.swing.JMenuItem();
        editMenu1 = new javax.swing.JMenu();
        cutMenuItem1 = new javax.swing.JMenuItem();
        copyMenuItem1 = new javax.swing.JMenuItem();
        pasteMenuItem1 = new javax.swing.JMenuItem();
        deleteMenuItem1 = new javax.swing.JMenuItem();
        helpMenu1 = new javax.swing.JMenu();
        contentsMenuItem1 = new javax.swing.JMenuItem();
        aboutMenuItem1 = new javax.swing.JMenuItem();
        jFrame2 = new javax.swing.JFrame();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton4 = new javax.swing.JButton();
        menuBar2 = new javax.swing.JMenuBar();
        fileMenu2 = new javax.swing.JMenu();
        openMenuItem2 = new javax.swing.JMenuItem();
        saveMenuItem2 = new javax.swing.JMenuItem();
        saveAsMenuItem2 = new javax.swing.JMenuItem();
        exitMenuItem2 = new javax.swing.JMenuItem();
        editMenu2 = new javax.swing.JMenu();
        cutMenuItem2 = new javax.swing.JMenuItem();
        copyMenuItem2 = new javax.swing.JMenuItem();
        pasteMenuItem2 = new javax.swing.JMenuItem();
        deleteMenuItem2 = new javax.swing.JMenuItem();
        helpMenu2 = new javax.swing.JMenu();
        contentsMenuItem2 = new javax.swing.JMenuItem();
        aboutMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrame1.setTitle("Evaluation Tool Server");
        jFrame1.setResizable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Add Instructor");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Full Name");

        jButton7.setText("Save");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        fileMenu1.setMnemonic('f');
        fileMenu1.setText("File");

        openMenuItem1.setMnemonic('o');
        openMenuItem1.setText("Open");
        fileMenu1.add(openMenuItem1);

        saveMenuItem1.setMnemonic('s');
        saveMenuItem1.setText("Save");
        fileMenu1.add(saveMenuItem1);

        saveAsMenuItem1.setMnemonic('a');
        saveAsMenuItem1.setText("Save As ...");
        saveAsMenuItem1.setDisplayedMnemonicIndex(5);
        fileMenu1.add(saveAsMenuItem1);

        exitMenuItem1.setMnemonic('x');
        exitMenuItem1.setText("Exit");
        exitMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu1.add(exitMenuItem1);

        menuBar1.add(fileMenu1);

        editMenu1.setMnemonic('e');
        editMenu1.setText("Edit");

        cutMenuItem1.setMnemonic('t');
        cutMenuItem1.setText("Cut");
        editMenu1.add(cutMenuItem1);

        copyMenuItem1.setMnemonic('y');
        copyMenuItem1.setText("Copy");
        editMenu1.add(copyMenuItem1);

        pasteMenuItem1.setMnemonic('p');
        pasteMenuItem1.setText("Paste");
        editMenu1.add(pasteMenuItem1);

        deleteMenuItem1.setMnemonic('d');
        deleteMenuItem1.setText("Delete");
        editMenu1.add(deleteMenuItem1);

        menuBar1.add(editMenu1);

        helpMenu1.setMnemonic('h');
        helpMenu1.setText("Help");

        contentsMenuItem1.setMnemonic('c');
        contentsMenuItem1.setText("Contents");
        helpMenu1.add(contentsMenuItem1);

        aboutMenuItem1.setMnemonic('a');
        aboutMenuItem1.setText("About");
        helpMenu1.add(aboutMenuItem1);

        menuBar1.add(helpMenu1);

        jFrame1.setJMenuBar(menuBar1);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)))
                .addGap(75, 75, 75))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel3)
                .addGap(35, 35, 35)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jButton7))
                .addContainerGap(136, Short.MAX_VALUE))
        );

        jFrame2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrame2.setTitle("Evaluation Tool Server");
        jFrame2.setResizable(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Remove Instructor");
        
        
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        
        jScrollPane1.setViewportView(jList1);

        jButton4.setText("Remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton4ActionPerformed(evt);
                } catch (RemoteException ex) {
                    Logger.getLogger(EvaluationToolServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        fileMenu2.setMnemonic('f');
        fileMenu2.setText("File");

        openMenuItem2.setMnemonic('o');
        openMenuItem2.setText("Open");
        fileMenu2.add(openMenuItem2);

        saveMenuItem2.setMnemonic('s');
        saveMenuItem2.setText("Save");
        fileMenu2.add(saveMenuItem2);

        saveAsMenuItem2.setMnemonic('a');
        saveAsMenuItem2.setText("Save As ...");
        saveAsMenuItem2.setDisplayedMnemonicIndex(5);
        fileMenu2.add(saveAsMenuItem2);

        exitMenuItem2.setMnemonic('x');
        exitMenuItem2.setText("Exit");
        exitMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu2.add(exitMenuItem2);

        menuBar2.add(fileMenu2);

        editMenu2.setMnemonic('e');
        editMenu2.setText("Edit");

        cutMenuItem2.setMnemonic('t');
        cutMenuItem2.setText("Cut");
        editMenu2.add(cutMenuItem2);

        copyMenuItem2.setMnemonic('y');
        copyMenuItem2.setText("Copy");
        editMenu2.add(copyMenuItem2);

        pasteMenuItem2.setMnemonic('p');
        pasteMenuItem2.setText("Paste");
        editMenu2.add(pasteMenuItem2);

        deleteMenuItem2.setMnemonic('d');
        deleteMenuItem2.setText("Delete");
        editMenu2.add(deleteMenuItem2);

        menuBar2.add(editMenu2);

        helpMenu2.setMnemonic('h');
        helpMenu2.setText("Help");

        contentsMenuItem2.setMnemonic('c');
        contentsMenuItem2.setText("Contents");
        helpMenu2.add(contentsMenuItem2);

        aboutMenuItem2.setMnemonic('a');
        aboutMenuItem2.setText("About");
        helpMenu2.add(aboutMenuItem2);

        menuBar2.add(helpMenu2);

        jFrame2.setJMenuBar(menuBar2);

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jFrame2Layout.createSequentialGroup()
                            .addGap(117, 117, 117)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jFrame2Layout.createSequentialGroup()
                            .addGap(64, 64, 64)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Evaluation Tool Server");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Server is Running");

        jLabel2.setText("Options");

        jButton1.setText("Add Instructor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Instructor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Power Off");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>  
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                             
        System.exit(0);
        reset();
    }                                            

    private void exitMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        
    }                                             

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        
    }                                           

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        jFrame1.setSize(400, 300);
        jFrame1.setLocationRelativeTo(null);
        jFrame1.setVisible(true);
    }                                        

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jFrame1.setVisible(false);
        String fullName = jTextField1.getText();
        try {
            addInstructor(fullName);
        } catch (RemoteException ex) {
            Logger.getLogger(EvaluationToolServer.class.getName()).log(Level.SEVERE, null, ex);
        }
        reset();
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.exit(0);
    }                                        

    private void exitMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jFrame2.setSize(400, 400);
        jFrame2.setLocationRelativeTo(null);
        jFrame2.setVisible(true);
        
        
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {                                         
        jFrame2.setVisible(false);
        String fullName = jList1.getSelectedValue();
        int pos = jList1.getSelectedIndex();
        removeInstructor(fullName,pos);
        reset();
    }                                        
    public void reset() {
        initComponents();
        listModel();
    }
    public void listModel() {
        DefaultListModel dlm = new DefaultListModel();
       
        try {
            ArrayList<String> inst = fetchInstructors();
            Collections.sort(inst);
            for(String names:inst) {
                dlm.addElement(names);
            }
            
            
        }catch(Exception e) {
            System.out.println("Error");
            e.printStackTrace();
        }
        
        jList1.setModel(dlm);
        
        
    }
    public ArrayList<String> fetchInstructors() throws RemoteException{
        InputStream fstream = null;
        BufferedReader filereader = null;
        
        ArrayList<String> names = new ArrayList<>();
        String path = "./instructors.txt";
        String line = "";
        try {
//            fstream = getClass().getResourceAsStream(path);
//            filereader = new BufferedReader(new InputStreamReader(fstream));
            Scanner file = new Scanner(new File(path));
            while(file.hasNextLine()) {
                names.add(file.nextLine());
            }
        }catch(Exception e) {
            e.printStackTrace();
            
        }
        
        
        return names;
    }
    public String fetchQuestions(int n) throws RemoteException {
        String questions = "";
        
        InputStream fstream = null;
        BufferedReader filereader = null;
        
        String path = "questions.txt";
        String line = "";
        
        try {
            fstream = getClass().getResourceAsStream(path);
            filereader = new BufferedReader(new InputStreamReader(fstream));
           // while((
                line = filereader.readLine();
//                    )!=null) {
                String[] q = line.split("_");
                questions = q[n];
            //}
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        return questions;
    }
    public ArrayList<String> fetchChoices() throws RemoteException {
        ArrayList<String> choices = new ArrayList<>();
        
        InputStream fstream = null;
        BufferedReader filereader = null;
        
        
        String path = "choices.txt";
        String line = "";
        try {
            
            fstream = getClass().getResourceAsStream(path);
            filereader = new BufferedReader(new InputStreamReader(fstream));
            while((line = filereader.readLine())!=null) {
                choices.add(line);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        return choices;
    }
    public void record(String name, ArrayList<Integer> scores) {
        
       String pathToWrite = "./record.txt";
       BufferedWriter writer = null;
       
       try {   
          
          //URL resourceUrl;
           //resourceUrl = getClass().getResource(file);
          File f = new File(pathToWrite);
          FileWriter fw = new FileWriter(f,true);
          //InputStream fstream =  getClass().getResourceAsStream(file);
          //BufferedReader filereader = new BufferedReader(new InputStreamReader(fstream));
	  writer = new BufferedWriter(fw);
          
//          if(filereader.readLine()!=null) {
//              writer.newLine();
//          }
	  writer.write(name);
          for(int score: scores){
              writer.write("_"+score);
          }
          writer.newLine();
       }catch(Exception e) {
           System.out.println("Error Reading Text Files");
           e.printStackTrace();
       }
       finally
	{ 
	   try{
	      if(writer!=null)
		 writer.close();
	   }catch(Exception ex){
	       System.out.println("Error in closing the BufferedWriter");
	    }
	}
    }
    public ArrayList<String> fetchRecord(String name) {
        ArrayList<String> record = new ArrayList<>();
        InputStream fstream = null;
        BufferedReader filereader = null;
        
        
        String path = "./record.txt";
        String line = "";
        try {
            
            fstream = new FileInputStream(path);
            filereader = new BufferedReader(new InputStreamReader(fstream));
            while((line = filereader.readLine())!=null) {
                String[] s = line.split("_");
                
                if(s[0].equals(name)) {
                    record.add(line);
                }        
                
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        return record;  
    }
    public void addInstructor(String fullName) throws RemoteException{
                
       String pathToWrite = "./instructors.txt";
       BufferedWriter writer = null;
       
       try {   
          
          //URL resourceUrl;
           //resourceUrl = getClass().getResource(file);
          File f = new File(pathToWrite);
          FileWriter fw = new FileWriter(f,true);
          //InputStream fstream =  getClass().getResourceAsStream(file);
          //BufferedReader filereader = new BufferedReader(new InputStreamReader(fstream));
	  writer = new BufferedWriter(fw);
          
//          if(filereader.readLine()!=null) {
//              writer.newLine();
//          }
          
	  writer.write(fullName);
          writer.newLine();
       }catch(Exception e) {
           System.out.println("Error Reading Text Files");
           e.printStackTrace();
       }
       finally
	{ 
	   try{
	      if(writer!=null)
		 writer.close();
	   }catch(Exception ex){
	       System.out.println("Error in closing the BufferedWriter");
	    }
	}
    }
    public void removeInstructor(String fullName, int pos) throws RemoteException{
      ArrayList<String> instructors = fetchInstructors();
      instructors.remove(pos);
      
       
       String pathToWrite = "./instructors.txt";
       BufferedWriter writer = null;
       
       try {   

          File f = new File(pathToWrite);
          FileWriter fw = new FileWriter(f,false);

	  writer = new BufferedWriter(fw);

         for(String o:instructors){
            writer.write(o);
            writer.newLine();
          }
       }catch(Exception e) {
           System.out.println("Error Reading Text Files");
           e.printStackTrace();
       }
       finally { 
	   try{
	      if(writer!=null)
		 writer.close();
	   }catch(Exception ex){
	       System.out.println("Error in closing the BufferedWriter");
	    }
	}
    }
    
    public static void main(String[] args) {
        try {
            EvaluationToolServer appRmi = new EvaluationToolServer();
            EvalInterface stub = (EvalInterface) UnicastRemoteObject.exportObject(appRmi,1099);
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.rebind("eval", stub);
            System.out.println("Bound");
            
        }catch(Exception e) {
            System.out.println("Another instance is running.");
        }
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EvaluationToolServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EvaluationToolServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EvaluationToolServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EvaluationToolServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvaluationToolServer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem aboutMenuItem1;
    private javax.swing.JMenuItem aboutMenuItem2;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem contentsMenuItem1;
    private javax.swing.JMenuItem contentsMenuItem2;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem copyMenuItem1;
    private javax.swing.JMenuItem copyMenuItem2;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem cutMenuItem1;
    private javax.swing.JMenuItem cutMenuItem2;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem deleteMenuItem1;
    private javax.swing.JMenuItem deleteMenuItem2;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu editMenu1;
    private javax.swing.JMenu editMenu2;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exitMenuItem1;
    private javax.swing.JMenuItem exitMenuItem2;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu fileMenu1;
    private javax.swing.JMenu fileMenu2;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu helpMenu1;
    private javax.swing.JMenu helpMenu2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuBar menuBar1;
    private javax.swing.JMenuBar menuBar2;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openMenuItem1;
    private javax.swing.JMenuItem openMenuItem2;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem pasteMenuItem1;
    private javax.swing.JMenuItem pasteMenuItem2;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem1;
    private javax.swing.JMenuItem saveAsMenuItem2;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem saveMenuItem1;
    private javax.swing.JMenuItem saveMenuItem2;
    // End of variables declaration    


}
